{"version":3,"sources":["app.js"],"names":["express","require","path","morgan","bodyParser","csrf","cookieParser","passport","app","set","join","__dirname","flash","pretty","favicon","use","csrfProtection","cookie","urlencoded","extended","session","secret","saveUninitialized","resave","initialize","checkout","press","contact","admin","eyetest","routes","products","users","profile","res","next","err","req","error","notice","success","msg","locals","status","render","message","Error","get","module","exports"],"mappings":"aAAA,IAAIA,QAAUC,QAAQ,WAAlBD,KAAOC,QAAGA,QAEVC,QAAOD,QAAQ,iBAGfE,OAASF,QAAQ,UAAjBE,aAASF,QAAQ,iBAIjBG,WAAaH,QAAQ,eACrBI,KAAOJ,QAAQ,QAFfK,QAAAA,QAAeL,mBAIfM,SAAWN,QAAQ,YAHnBG,MAAAA,QAAaH,iBACbI,IAAIL,UAQRQ,IAAIC,IAAI,QAASP,KAAKQ,KAAKC,UAAW,UANtCH,IAAID,IAAAA,cAAmB,QACvBC,IAAII,OAAKC,QAAW,EAKpBL,IAAIC,IAAIK,QAARZ,KAAqBQ,KAAJC,UAAA,SAAjB,0BASAH,IAAIO,IAAIZ,OAAO,QAHX,IAAAa,eAAAX,KAAA,CAAAY,QAAA,IACJT,IAAIO,IAAID,WAAQZ,QAOhBM,IAAIO,IAAIX,WAAWc,WAAW,CAACC,UAAU,KAEzCX,IAAIO,IAAIT,gBALoBW,IAAAA,IAAMjB,QAAE,OAAAE,KAAAQ,KAAAC,UAAA,YASpCH,IAAIO,IAAIK,QAAQ,CAAEC,OAAQ,cAAeC,mBAAmB,EAAMC,QAAQ,KAN1Ef,QAAQJ,oBAARI,CAAQD,UAAsBC,IAU1BO,IATAR,SAAAiB,cACJhB,IAAIO,IAAIT,SAAAA,WAERE,IAAIO,IAAIf,SAEUqB,IAAAA,OAAQpB,QAAA,mBAAeqB,MAAAA,QAAiB,iBAAjBA,CAAzBd,IAAAD,UAAkDgB,SAAQtB,QAAA,iBActEwB,SAbAxB,QAAA,qBAcAyB,MAAQzB,QAAQ,kBAbpBA,SAAQA,QAAA,qBAeJ0B,QAAU1B,QAAQ,oBAClB2B,MAAQ3B,QAAQ,kBAdhBc,QAAIR,QAASiB,oBAgBbK,QAAU5B,QAAQ,qBATtBO,IAAIsB,IAAAA,IAAS7B,QAebO,IAAIO,IAAI,QAASgB,UAdjBvB,IAAIwB,IAAAA,YAAgBP,UAgBpBjB,IAAIO,IAAI,SAAUW,OAflBlB,IAAIuB,IAAAA,YAAW9B,UAiBfO,IAAIO,IAAI,cAAeY,SAhBvBnB,IAAIiB,IAAAA,SAAWxB,OAkBfO,IAAIO,IAAI,OAAQkB,SAjBhBzB,IAAIkB,IAAAA,YAAgBG,SAEpBrB,IAAImB,IAAAA,SAAU1B,EAAQiC,EAAAC,GAqBlB,IAAIC,EAAMC,EAAIjB,QAAQkB,MApBtBV,EAAQ3B,EAAAA,QAAQsC,OAsBZC,EAAUH,EAAIjB,QAAQoB,eAEnBH,EAAIjB,QAAQkB,aAtBZD,EAAGpC,QAAQuC,eAwBXH,EAAIjB,QAAQmB,OAnBfH,IAAKN,EAAAA,OAAbQ,MAAAF,GACQK,IAAAP,EAASH,OAAAA,OAAjBU,GACQD,IAAAN,EAAaT,OAAAA,QAArBe,GAEIzB,MA0BJP,IAAIO,IAAI,SAAUsB,EAAKH,EAAKC,GAlBxBpB,IAAIqB,EAAA,IAASC,MAAKH,aAClBE,EAAIA,OAAUhB,IAAde,EACOC,KASUM,gBAAjBlC,IAAIgC,IAAAA,QAEJL,IAAIpB,IAAA,SAAAqB,EAAAC,EAAAH,EAAAC,GAIRD,EAAAS,OAAAP,EAAAO,QAAA,KAcQT,EAAIU,OAAO,QAAS,CAbpBC,QAAAT,EAAeF,QACTI,MAAIQ,MASlBtC,IAAIA,IAAIuC,SAAJX,EAAmBC,EAAAH,EAAAC,GACnB3B,EAAIO,OAAIqB,EAAAO,QAAA,KACJT,EAAIS,OAAOP,QAAIO,CACXC,QAAOR,EAAAS,QACPA,MAAST,OAmBrBY,OAAOC,QAAUzC","file":"app.min.js","sourcesContent":["var express = require('express');\n\nvar path = require('path');\n\nvar favicon = require('serve-favicon');\nvar morgan = require('morgan');\n\n// authentication modules\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar csrf = require('csrf');\nvar session = require('express-session');\nvar passport = require('passport');\nvar flash = require('connect-flash');\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n//Reformat HTML code after renders\napp.locals.pretty = true;\n\n// set up express application\n    // setup favicon if needed\napp.use(favicon(path.join(__dirname, 'public', '/img/ico/favicon.ico')));\n    // log every request to the console\napp.use(morgan('dev'));\n    // csrf token init\nvar csrfProtection = csrf({ cookie: true });\n    // get info from html forms\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\n    // read cookies\napp.use(cookieParser());\n    // setup static directory\napp.use(express.static(path.join(__dirname, 'public')));\n    // setup session secret\napp.use(session({ secret: 'anhpham1509', saveUninitialized: true, resave: true }));\n    // pass passport for configuration\nrequire('./config/passport')(passport);\n    // init passport\napp.use(passport.initialize());\n    // persistent login sessions\napp.use(passport.session());\n    // use connect-flash for flash messages stored in session\napp.use(flash());\n\n// routes\nvar routes = require('./routes/routes');\nvar users = require('./routes/users')(app, passport);\nvar products = require('./routes/cart');\nvar checkout = require('./routes/checkout');\nvar press = require('./routes/press');\nvar services = require('./routes/services');\nvar contact = require('./routes/contact');\nvar admin = require('./routes/admin');\nvar profile = require('./routes/profile');\nvar eyetest = require('./routes/eye-test');\n\n\n//require('./routes/users')(app, passport);\n\napp.use('/', routes);\napp.use('/cart', products);\napp.use('/checkout', checkout);\napp.use('/press', press);\napp.use('/services', services);\napp.use('/contact-us', contact);\napp.use('/admin', admin);\napp.use('/usr', profile);\napp.use('/eye-test', eyetest);\n\n\n// Session-persisted message middleware\napp.use(function(req, res, next){\n    var err = req.session.error,\n        msg = req.session.notice,\n        success = req.session.success;\n\n    delete req.session.error;\n    delete req.session.success;\n    delete req.session.notice;\n\n    if (err) res.locals.error = err;\n    if (msg) res.locals.notice = msg;\n    if (success) res.locals.success = success;\n\n    next();\n});\n\n\n// catch 404 and forward to error handler\napp.use(function (req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n    app.use(function (err, req, res, next) {\n        res.status(err.status || 500);\n        res.render('error', {\n            message: err.message,\n            error: err\n        });\n    });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function (err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n        message: err.message,\n        error: {}\n    });\n});\n\n\n\n\nmodule.exports = app;\n"]}