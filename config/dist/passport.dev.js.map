{"version":3,"sources":["passport.js"],"names":["LocalStrategy","require","Strategy","bcrypt","database","RunQuery","module","exports","passport","serializeUser","user","done","UserID","deserializeUser","userId","sqlStr","rows","use","usernameField","passwordField","passReqToCallback","req","username","password","length","flash","compareSync","Password","email","body","rePassword","selectQuery","emailRows","usernameRows","fullName","phone","address","streetAddress","postcode","city","country","passwordHash","hashSync","insertQuery","insertResult","insertId","addRow"],"mappings":";;AAAA;AAEA;AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAAP,CAA0BC,QAA9C,C,CAEA;;;AACA,IAAIC,MAAM,GAAGF,OAAO,CAAC,eAAD,CAApB,C,CAEA;;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,oBAAD,CAAtB;;AACA,IAAII,QAAQ,GAAGD,QAAQ,CAACC,QAAxB,C,CAEA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,QAAV,EAAoB;AAEjC;AACA;AACA;AACA;AACA;AAEA;AACAA,EAAAA,QAAQ,CAACC,aAAT,CAAuB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACzCA,IAAAA,IAAI,CAAC,IAAD,EAAOD,IAAI,CAACE,MAAZ,CAAJ;AACH,GAFD,EATiC,CAajC;;AACAJ,EAAAA,QAAQ,CAACK,eAAT,CAAyB,UAAUC,MAAV,EAAkBH,IAAlB,EAAwB;AAC7C,QAAII,MAAM,GAAG;;;8BAAA,GAGYD,MAHZ,GAGqB,IAHlC;AAIAT,IAAAA,QAAQ,CAACU,MAAD,EAAS,UAAUC,IAAV,EAAgB;AAC7BL,MAAAA,IAAI,CAAC,IAAD,EAAOK,IAAI,CAAC,CAAD,CAAX,CAAJ;AACH,KAFO,CAAR;AAGH,GARD;AAWAR,EAAAA,QAAQ,CAACS,GAAT,CAAa,SAAb,EAAwB,IAAIjB,aAAJ,CAAkB;AAClCkB,IAAAA,aAAa,EAAE,UADmB;AAElCC,IAAAA,aAAa,EAAE,UAFmB;AAGlCC,IAAAA,iBAAiB,EAAE,IAHe,CAGV;;AAHU,GAAlB,EAKpB,UAAUC,GAAV,EAAeC,QAAf,EAAyBC,QAAzB,EAAmCZ,IAAnC,EAAyC;AAAE;AACvC;AACA,QAAII,MAAM,GAAG,4CAA4CO,QAA5C,GAAuD,IAApE;AACAjB,IAAAA,QAAQ,CAACU,MAAD,EAAS,UAAUC,IAAV,EAAgB;AAC7B;AACA,UAAIA,IAAI,CAACQ,MAAL,GAAc,CAAlB,EACI,OAAOb,IAAI,CAAC,IAAD,EAAO,KAAP,EAAcU,GAAG,CAACI,KAAJ,CAAU,aAAV,EAAyB,gBAAzB,CAAd,CAAX,CAHyB,CAG6C;AAE1E;;AACA,UAAI,CAACtB,MAAM,CAACuB,WAAP,CAAmBH,QAAnB,EAA6BP,IAAI,CAAC,CAAD,CAAJ,CAAQW,QAArC,CAAL,EACI,OAAOhB,IAAI,CAAC,IAAD,EAAO,KAAP,EAAcU,GAAG,CAACI,KAAJ,CAAU,aAAV,EAAyB,uBAAzB,CAAd,CAAX,CAPyB,CAOoD;AAEjF;;AACA,aAAOd,IAAI,CAAC,IAAD,EAAOK,IAAI,CAAC,CAAD,CAAX,CAAX;AACH,KAXO,CAAR;AAaH,GArBmB,CAAxB;AAyBAR,EAAAA,QAAQ,CAACS,GAAT,CAAa,SAAb,EAAwB,IAAIjB,aAAJ,CAAkB;AAClC;AACAkB,IAAAA,aAAa,EAAE,UAFmB;AAGlCC,IAAAA,aAAa,EAAE,UAHmB;AAIlCC,IAAAA,iBAAiB,EAAE,IAJe,CAIV;;AAJU,GAAlB,EAMpB,UAAUC,GAAV,EAAeC,QAAf,EAAyBC,QAAzB,EAAmCZ,IAAnC,EAAyC;AACrC;AACA;AACA,QAAIiB,KAAK,GAAGP,GAAG,CAACQ,IAAJ,CAASD,KAArB;;AAEA,QAAIL,QAAQ,IAAIF,GAAG,CAACQ,IAAJ,CAASC,UAAzB,EAAqC;AACjC,aAAOnB,IAAI,CAAC,IAAD,EAAO,KAAP,EAAcU,GAAG,CAACI,KAAJ,CAAU,aAAV,EAAyB,yBAAzB,CAAd,CAAX;AACH,KAFD,MAGK;AAED,UAAIM,WAAW,GAAG;;qCAAA,GAEMH,KAFN,GAEc,IAFhC;AAGAvB,MAAAA,QAAQ,CAAC0B,WAAD,EAAc,UAAUC,SAAV,EAAqB;AACvC,YAAIA,SAAS,CAACR,MAAV,GAAmB,CAAvB,EAA0B;AACtB,iBAAOb,IAAI,CAAC,IAAD,EAAO,KAAP,EAAcU,GAAG,CAACI,KAAJ,CAAU,aAAV,EAAyB,sCAAzB,CAAd,CAAX;AACH,SAFD,MAGK;AACDM,UAAAA,WAAW,GAAG;;;4CAAA,GAGST,QAHT,GAGoB,IAHlC;AAIAjB,UAAAA,QAAQ,CAAC0B,WAAD,EAAc,UAAUE,YAAV,EAAwB;AAC1C,gBAAIA,YAAY,CAACT,MAAb,GAAsB,CAA1B,EAA6B;AACzB,qBAAOb,IAAI,CAAC,IAAD,EAAO,KAAP,EAAcU,GAAG,CAACI,KAAJ,CAAU,aAAV,EAAyB,iCAAzB,CAAd,CAAX;AACH,aAFD,MAGK;AACD;AACA,kBAAIS,QAAQ,GAAGb,GAAG,CAACQ,IAAJ,CAASK,QAAxB;AACA,kBAAIC,KAAK,GAAGd,GAAG,CAACQ,IAAJ,CAASM,KAArB;AACA,kBAAIC,OAAO,GAAGf,GAAG,CAACQ,IAAJ,CAASQ,aAAvB;AACA,kBAAIC,QAAQ,GAAGjB,GAAG,CAACQ,IAAJ,CAASS,QAAxB;AACA,kBAAIC,IAAI,GAAGlB,GAAG,CAACQ,IAAJ,CAASU,IAApB;AACA,kBAAIC,OAAO,GAAGnB,GAAG,CAACQ,IAAJ,CAASW,OAAvB;AACA,kBAAIC,YAAY,GAAGtC,MAAM,CAACuC,QAAP,CAAgBnB,QAAhB,EAA0B,IAA1B,EAAgC,IAAhC,CAAnB;AAEA,kBAAIoB,WAAW,GAAG;;uCAAA,GAERT,QAFQ,GAEG;uCAFH,GAGRE,OAHQ,GAGE;uCAHF,GAIRE,QAJQ,GAIG;uCAJH,GAKRC,IALQ,GAKD;uCALC,GAMRC,OANQ,GAME;uCANF,GAORL,KAPQ,GAOA;uCAPA,GAQRP,KARQ,GAQA;uCARA,GASRN,QATQ,GASG;uCATH,GAURmB,YAVQ,GAUO,QAVzB;AAYApC,cAAAA,QAAQ,CAACsC,WAAD,EAAc,UAAUC,YAAV,EAAwB;AAC1C;AACA,oBAAIlC,IAAI,GAAG;AACPE,kBAAAA,MAAM,EAAEgC,YAAY,CAACC;AADd,iBAAX;AAGAF,gBAAAA,WAAW,GAAG;kDAAA,GAEVC,YAAY,CAACC,QAFH,GAEc,MAFd,GAGVX,QAHU,GAGC,QAHD,GAIVE,OAJU,GAIA,QAJA,GAKVE,QALU,GAKC,QALD,GAMVC,IANU,GAMH,QANG,GAOVC,OAPU,GAOA,QAPA,GAQVL,KARU,GAQF,KARZ;AASA9B,gBAAAA,QAAQ,CAACsC,WAAD,EAAc,UAAUG,MAAV,EAAkB;AACpC,yBAAOnC,IAAI,CAAC,IAAD,EAAOD,IAAP,CAAX;AACH,iBAFO,CAAR;AAGH,eAjBO,CAAR;AAkBH;AACJ,WA7CO,CAAR;AA8CH;AACJ,OAxDO,CAAR;AAyDH;AACJ,GA7EmB,CAAxB;AA+EH,CAjID","sourcesContent":["// config/passport.js\n\n// load all the things we need\nvar LocalStrategy = require('passport-local').Strategy;\n\n// Generate Hash\nvar bcrypt = require('bcrypt-nodejs');\n\n// database module\nvar database = require('../config/database');\nvar RunQuery = database.RunQuery;\n\n// expose this function to our app using module.exports\nmodule.exports = function (passport) {\n\n    // =========================================================================\n    // passport session setup ==================================================\n    // =========================================================================\n    // required for persistent login sessions\n    // passport needs ability to serialize and unserialize users out of session\n\n    // used to serialize the user for the session\n    passport.serializeUser(function (user, done) {\n        done(null, user.UserID);\n    });\n\n    // used to deserialize the user\n    passport.deserializeUser(function (userId, done) {\n        var sqlStr = '\\\n            SELECT *\\\n            FROM users\\\n            where UserID = \\'' + userId + '\\'';\n        RunQuery(sqlStr, function (rows) {\n            done(null, rows[0]);\n        });\n    });\n\n\n    passport.use('sign-in', new LocalStrategy({\n            usernameField: 'username',\n            passwordField: 'password',\n            passReqToCallback: true // allows to pass back the entire request to the callback\n        },\n        function (req, username, password, done) { // callback with username and password from form\n            // check to see if the user exists or not\n            var sqlStr = 'SELECT * FROM users WHERE Username = \\'' + username + '\\'';\n            RunQuery(sqlStr, function (rows) {\n                // if no user is found, return the message\n                if (rows.length < 1)\n                    return done(null, false, req.flash('signInError', 'No user found.')); // req.flash is the way to set flashdata using connect-flash\n\n                // if the user is found but the password is wrong\n                if (!bcrypt.compareSync(password, rows[0].Password))\n                    return done(null, false, req.flash('signInError', 'Oops! Wrong password.')); // create the loginMessage and save it to session as flashdata\n\n                // all is well, return successful user\n                return done(null, rows[0]);\n            });\n\n        })\n    );\n\n\n    passport.use('sign-up', new LocalStrategy({\n            // by default, local strategy uses username and password\n            usernameField: 'username',\n            passwordField: 'password',\n            passReqToCallback: true // allows us to pass back the entire request to the callback\n        },\n        function (req, username, password, done) {\n            // find a user whose email is the same as the forms email\n            // we are checking to see if the user trying to login already exists\n            var email = req.body.email;\n\n            if (password != req.body.rePassword) {\n                return done(null, false, req.flash('signUpError', 'Passwords do not match.'));\n            }\n            else {\n\n                var selectQuery = 'SELECT *\\\n                    FROM users\\\n                    WHERE email = \\'' + email + '\\'';\n                RunQuery(selectQuery, function (emailRows) {\n                    if (emailRows.length > 0) {\n                        return done(null, false, req.flash('signUpError', 'Email address has already been used.'));\n                    }\n                    else {\n                        selectQuery = '\\\n                        SELECT *\\\n                        FROM users\\\n                        WHERE username = \\'' + username + '\\'';\n                        RunQuery(selectQuery, function (usernameRows) {\n                            if (usernameRows.length > 0) {\n                                return done(null, false, req.flash('signUpError', 'Username has already been used.'));\n                            }\n                            else {\n                                // if there is no user with that user and email\n                                var fullName = req.body.fullName;\n                                var phone = req.body.phone;\n                                var address = req.body.streetAddress;\n                                var postcode = req.body.postcode;\n                                var city = req.body.city;\n                                var country = req.body.country;\n                                var passwordHash = bcrypt.hashSync(password, null, null);\n\n                                var insertQuery = 'INSERT INTO Users\\\n                                    VALUES(null,\\\n                                    \\'' + fullName + '\\', \\\n                                    \\'' + address + '\\', \\\n                                    \\'' + postcode + '\\', \\\n                                    \\'' + city + '\\', \\\n                                    \\'' + country + '\\', \\\n                                    \\'' + phone + '\\', \\\n                                    \\'' + email + '\\', \\\n                                    \\'' + username + '\\', \\\n                                    \\'' + passwordHash + '\\', 0)';\n\n                                RunQuery(insertQuery, function (insertResult) {\n                                    //user\n                                    var user = {\n                                        UserID: insertResult.insertId\n                                    };\n                                    insertQuery = 'INSERT INTO Addresses\\\n                                    VALUES(null, ' +\n                                        insertResult.insertId + ', \\'' +\n                                        fullName + '\\', \\'' +\n                                        address + '\\', \\'' +\n                                        postcode + '\\', \\'' +\n                                        city + '\\', \\'' +\n                                        country + '\\', \\'' +\n                                        phone + '\\')';\n                                    RunQuery(insertQuery, function (addRow) {\n                                        return done(null, user);\n                                    });\n                                });\n                            }\n                        });\n                    }\n                });\n            }\n        })\n    );\n};\n"],"file":"passport.dev.js"}