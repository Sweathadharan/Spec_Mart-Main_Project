{"version":3,"sources":["passport.js"],"names":["LocalStrategy","require","Strategy","bcrypt","database","RunQuery","module","exports","passport","done","serializeUser","user","UserID","deserializeUser","userId","rows","use","usernameField","username","passwordField","passReqToCallback","sqlStr","compareSync","password","req","flash","Password","email","body","emailRows","length","rePassword","selectQuery","fullName","insertQuery","postcode","hashSync","usernameRows","country","phone","address","streetAddress","city","passwordHash","insertResult","insertId","addRow"],"mappings":"aAEA,IAAAA,cAAAC,QAAA,kBAAAC,SAIIC,OAASF,QAAQ,iBAGjBG,SAAWH,QAAQ,sBAAnBG,SAAWH,SAAQI,SAIvBC,OAAOC,QAAU,SAAUC,GAUnBC,EAAIC,cAAJ,SAAAC,EAAAF,GAGJA,EAAA,KAAAE,EAAAC,UACAJ,EAASK,gBAAgB,SAAUC,EAAQL,GAKvCJ,SAJa,yEAKTS,EAAA,IADJ,SAAAC,GALJN,EAAA,KAAAM,EAAA,QAWAP,EAASQ,IAAI,UAAW,IAAIhB,cAAc,CAKtCiB,cAAeC,WAA4BC,cAAA,WACvCC,mBAAA,GAEAf,SAASgB,EAAQH,EAAUH,EAAMN,GAK7BJ,SAHA,yCACuCa,EAAe,IAEtD,SAAAH,GACKZ,OAAOmB,EAAAA,OAAYC,EAGxBd,EAAA,MAAA,EAAAe,EAAAC,MAAA,cAAA,mBATJtB,OAAAmB,YAAAC,EAAAR,EAAA,GAAAW,UAmBejB,EAAA,KAFmBM,EAAA,IAzB1CN,EAAA,MAAA,EAAAe,EAAAC,MAAA,cAAA,+BAkCQjB,EAASQ,IAAGQ,UAASG,IAArB3B,cAAA,CAEIuB,cAAgBK,WAChBT,cAAkB,WAEjBC,mBAAA,GART,SAAUI,EAAKN,EAAUK,EAAUd,GAcnBoB,IAAAA,EAAUC,EAAVF,KAAJD,MAAA,GAGKJ,GAAAC,EAAAI,KAAAG,WACDC,OAAWvB,EAAG,MAAA,EAAAe,EAAAC,MAAA,cAAA,4BAIdpB,IAAS2B,EAAa,4EAEWR,EAAA,IAD7BnB,SAGK2B,EAAA,SAAAH,GACD,GAAA,EAAAA,EAAAC,OACIG,OAAWT,EAAII,MAAKK,EAAxBT,EAAAC,MAAA,cAAA,yCAQIS,SALAC,EAAoBA,+GAGEC,EAAP,IAED,SAAAC,GAbtB,GAA0B,EAAtBA,EAAaP,OACb,OAYkBrB,EAERwB,MAFQ,EAEGT,EAAAC,MAAA,cAAA,oCAVrB,IAAIQ,EAcMK,EANQV,KAMEK,SAbhBM,EAcMA,EAPQX,KAOAW,MAbdC,EAcMb,EAAQC,KAAAa,cAbdN,EAcMjB,EATQU,KASGO,SAbjBO,EAcMC,EAAAA,KAAAA,KAEYL,EAAUM,EAAAA,KAAAA,QAC5BD,EAAAxC,OAAAiC,SAAAb,EAAA,KAAA,MAEYqB,EAAaC,yGAEXZ,EAAA,2CAdRO,EAcQ,2CASQL,EAAUW,2CAC5BJ,EAAA,2CADJJ,EAAA,2CAdJC,EAAA,2CAkBHZ,EAAA,2CA5CLT,EAAA,2CA8CHyB,EAAA,QAERtC,SAAA6B,EAAA,SAAAU,GA9Hb,IAAAjC,EAAA,CA2GwCC,OAAQgC,EAAaC,UAEzBX,EAAc,yEAEVU,EAAaC,SAAW,MACxBZ,EAAW,OACXO,EAAU,OACVL,EAAW,OACXO,EAAO,OACPJ,EAAU,OACVC,EAAQ,KACZlC,SAAS6B,EAAa,SAAUY,GAC5B,OAAOrC,EAAK,KAAME","file":"passport.min.js","sourcesContent":["// config/passport.js\n\n// load all the things we need\nvar LocalStrategy = require('passport-local').Strategy;\n\n// Generate Hash\nvar bcrypt = require('bcrypt-nodejs');\n\n// database module\nvar database = require('../config/database');\nvar RunQuery = database.RunQuery;\n\n// expose this function to our app using module.exports\nmodule.exports = function (passport) {\n\n    // =========================================================================\n    // passport session setup ==================================================\n    // =========================================================================\n    // required for persistent login sessions\n    // passport needs ability to serialize and unserialize users out of session\n\n    // used to serialize the user for the session\n    passport.serializeUser(function (user, done) {\n        done(null, user.UserID);\n    });\n\n    // used to deserialize the user\n    passport.deserializeUser(function (userId, done) {\n        var sqlStr = '\\\n            SELECT *\\\n            FROM users\\\n            where UserID = \\'' + userId + '\\'';\n        RunQuery(sqlStr, function (rows) {\n            done(null, rows[0]);\n        });\n    });\n\n\n    passport.use('sign-in', new LocalStrategy({\n            usernameField: 'username',\n            passwordField: 'password',\n            passReqToCallback: true // allows to pass back the entire request to the callback\n        },\n        function (req, username, password, done) { // callback with username and password from form\n            // check to see if the user exists or not\n            var sqlStr = 'SELECT * FROM users WHERE Username = \\'' + username + '\\'';\n            RunQuery(sqlStr, function (rows) {\n                // if no user is found, return the message\n                if (rows.length < 1)\n                    return done(null, false, req.flash('signInError', 'No user found.')); // req.flash is the way to set flashdata using connect-flash\n\n                // if the user is found but the password is wrong\n                if (!bcrypt.compareSync(password, rows[0].Password))\n                    return done(null, false, req.flash('signInError', 'Oops! Wrong password.')); // create the loginMessage and save it to session as flashdata\n\n                // all is well, return successful user\n                return done(null, rows[0]);\n            });\n\n        })\n    );\n\n\n    passport.use('sign-up', new LocalStrategy({\n            // by default, local strategy uses username and password\n            usernameField: 'username',\n            passwordField: 'password',\n            passReqToCallback: true // allows us to pass back the entire request to the callback\n        },\n        function (req, username, password, done) {\n            // find a user whose email is the same as the forms email\n            // we are checking to see if the user trying to login already exists\n            var email = req.body.email;\n\n            if (password != req.body.rePassword) {\n                return done(null, false, req.flash('signUpError', 'Passwords do not match.'));\n            }\n            else {\n\n                var selectQuery = 'SELECT *\\\n                    FROM users\\\n                    WHERE email = \\'' + email + '\\'';\n                RunQuery(selectQuery, function (emailRows) {\n                    if (emailRows.length > 0) {\n                        return done(null, false, req.flash('signUpError', 'Email address has already been used.'));\n                    }\n                    else {\n                        selectQuery = '\\\n                        SELECT *\\\n                        FROM users\\\n                        WHERE username = \\'' + username + '\\'';\n                        RunQuery(selectQuery, function (usernameRows) {\n                            if (usernameRows.length > 0) {\n                                return done(null, false, req.flash('signUpError', 'Username has already been used.'));\n                            }\n                            else {\n                                // if there is no user with that user and email\n                                var fullName = req.body.fullName;\n                                var phone = req.body.phone;\n                                var address = req.body.streetAddress;\n                                var postcode = req.body.postcode;\n                                var city = req.body.city;\n                                var country = req.body.country;\n                                var passwordHash = bcrypt.hashSync(password, null, null);\n\n                                var insertQuery = 'INSERT INTO Users\\\n                                    VALUES(null,\\\n                                    \\'' + fullName + '\\', \\\n                                    \\'' + address + '\\', \\\n                                    \\'' + postcode + '\\', \\\n                                    \\'' + city + '\\', \\\n                                    \\'' + country + '\\', \\\n                                    \\'' + phone + '\\', \\\n                                    \\'' + email + '\\', \\\n                                    \\'' + username + '\\', \\\n                                    \\'' + passwordHash + '\\', 0)';\n\n                                RunQuery(insertQuery, function (insertResult) {\n                                    //user\n                                    var user = {\n                                        UserID: insertResult.insertId\n                                    };\n                                    insertQuery = 'INSERT INTO Addresses\\\n                                    VALUES(null, ' +\n                                        insertResult.insertId + ', \\'' +\n                                        fullName + '\\', \\'' +\n                                        address + '\\', \\'' +\n                                        postcode + '\\', \\'' +\n                                        city + '\\', \\'' +\n                                        country + '\\', \\'' +\n                                        phone + '\\')';\n                                    RunQuery(insertQuery, function (addRow) {\n                                        return done(null, user);\n                                    });\n                                });\n                            }\n                        });\n                    }\n                });\n            }\n        })\n    );\n};\n"]}