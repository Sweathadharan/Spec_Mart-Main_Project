{"version":3,"sources":["eye-test.js"],"names":["express","require","router","Router","LocalStrategy","Strategy","bcrypt","database","RunQuery","module","exports","passport","serializeUser","user","done","UserID","use","usernameField","passwordField","passReqToCallback","req","username","password","email","body","rePassword","flash","selectQuery","emailRows","length","usernameRows","fullName","phone","address","streetAddress","postcode","city","country","passwordHash","hashSync","insertQuery","insertResult","insertId","addRow"],"mappings":"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","sourcesContent":["var express = require('express');\nvar router = express.Router();\n\n\n// load all the things we need\nvar LocalStrategy = require('passport-local').Strategy;\n\n// Generate Hash\nvar bcrypt = require('bcrypt-nodejs');\n\n// database module\nvar database = require('../config/database');\nvar RunQuery = database.RunQuery;\n\n/* Route Contact-us page. */\n// router.route('/')\n//     .get(function (req, res, next) {\n//         var contextDict = {\n//             currentUrl: '/eye-test',\n//             title: 'Eye test',\n//             customer: req.user\n//         };\n//         res.render('eye-test', contextDict);\n//     })\n\n    /* GET Input page. */\n\n// expose this function to our app using module.exports\nmodule.exports = function (passport) {\n\n    // =========================================================================\n    // passport session setup ==================================================\n    // =========================================================================\n    // required for persistent login sessions\n    // passport needs ability to serialize and unserialize users out of session\n\n    // used to serialize the user for the session\n    passport.serializeUser(function (user, done) {\n        done(null, user.UserID);\n    });\n\n    passport.use('eye-test', new LocalStrategy({\n            // by default, local strategy uses username and password\n            usernameField: 'username',\n            passwordField: 'password',\n            passReqToCallback: true // allows us to pass back the entire request to the callback\n        },\n        function (req, username, password, done) {\n            // find a user whose email is the same as the forms email\n            // we are checking to see if the user trying to login already exists\n            var email = req.body.email;\n\n            if (password != req.body.rePassword) {\n                return done(null, false, req.flash('signUpError', 'Passwords do not match.'));\n            }\n            else {\n\n                var selectQuery = 'SELECT *\\\n                    FROM user1\\\n                    WHERE email = \\'' + email + '\\'';\n                RunQuery(selectQuery, function (emailRows) {\n                    if (emailRows.length > 0) {\n                        return done(null, false, req.flash('signUpError', 'Email address has already been used.'));\n                    }\n                    else {\n                        selectQuery = '\\\n                        SELECT *\\\n                        FROM user1\\\n                        WHERE username = \\'' + username + '\\'';\n                        RunQuery(selectQuery, function (usernameRows) {\n                            if (usernameRows.length > 0) {\n                                return done(null, false, req.flash('signUpError', 'Username has already been used.'));\n                            }\n                            else {\n                                // if there is no user with that user and email\n                                var fullName = req.body.fullName;\n                                var phone = req.body.phone;\n                                var address = req.body.streetAddress;\n                                var postcode = req.body.postcode;\n                                var city = req.body.city;\n                                var country = req.body.country;\n                                var passwordHash = bcrypt.hashSync(password, null, null);\n\n                                var insertQuery = 'INSERT INTO user1\\\n                                    VALUES(null,\\\n                                    \\'' + fullName + '\\', \\\n                                    \\'' + address + '\\', \\\n                                    \\'' + postcode + '\\', \\\n                                    \\'' + city + '\\', \\\n                                    \\'' + country + '\\', \\\n                                    \\'' + phone + '\\', \\\n                                    \\'' + email + '\\', \\\n                                    \\'' + username + '\\', \\\n                                    \\'' + passwordHash + '\\', 0)';\n\n                                RunQuery(insertQuery, function (insertResult) {\n                                    //user\n                                    var user = {\n                                        UserID: insertResult.insertId\n                                    };\n                                    insertQuery = 'INSERT INTO Addresses\\\n                                    VALUES(null, ' +\n                                        insertResult.insertId + ', \\'' +\n                                        fullName + '\\', \\'' +\n                                        address + '\\', \\'' +\n                                        postcode + '\\', \\'' +\n                                        city + '\\', \\'' +\n                                        country + '\\', \\'' +\n                                        phone + '\\')';\n                                    RunQuery(insertQuery, function (addRow) {\n                                        return done(null, user);\n                                    });\n                                });\n                            }\n                        });\n                    }\n                });\n            }\n        })\n    );\n};\n\n\n\n\n\n\n\n\n\n\n\n\n// router.get('/', function(req, res) {\n//     res.render('eye-test');\n\n//     });\n\n\n\n\n\n// con.connect(function(err) {\n//   if (err) throw err;\n//   console.log(\"Connected!\");\n//   var sql = \"INSERT INTO sampledb (name, address) VALUES ('Company Inc', 'Highway 37')\";\n//   con.query(sql, function (err, result) {\n//     if (err) throw err;\n//     console.log(\"1 record inserted\");\n//   });\n// });\n    \nmodule.exports = router;"],"file":"eye-test.dev.js"}