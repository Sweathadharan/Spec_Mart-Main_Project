{"version":3,"sources":["profile.js"],"names":["express","require","router","Router","bcrypt","RunQuery","database","res","next","req","isAuthenticated","isLoggedIn","redirect","route","get","Admin","user","Username","render","title","FullName","customer","post","form","body","compareSync","password","postcode","Password","updateQuery","phone","UserID","streetAddress","city","country","result","passwordHash","newPassword","repeatPassword","currentPassword","selectQuery","orders","order","address","params","id","AddressID","OrderID","products","contextDict","addresses","insertQuery","exports","fullName","sqlStr","module"],"mappings":"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","file":"profile.min.js","sourcesContent":["var express = require('express');\nvar router = express.Router();\n\nvar bcrypt = require('bcrypt-nodejs');\n\n// database module\nvar database = require('../config/database');\nvar RunQuery = database.RunQuery;\n\nfunction isLoggedIn(req, res, next) {\n\n    // if user is authenticated in the session, carry on\n    if (req.isAuthenticated())\n        return next();\n\n    // if they aren't redirect them to the home page\n    res.redirect('/');\n}\n\nrouter.route('/')\n    .get(function (req, res) {\n        if (req.isAuthenticated()) {\n            if (req.user.Admin == 1) {\n                res.redirect('/admin');\n            }\n            else {\n                res.redirect('/usr/' + req.user.Username);\n            }\n        }\n        res.redirect('/');\n    });\n\nrouter.route('/:username')\n    .get(isLoggedIn, function (req, res) {\n\n        res.render('profile/profile', {\n            title: req.user.FullName,\n            customer: req.user\n        });\n    });\n\nrouter.route('/:username/edit')\n    .get(isLoggedIn, function (req, res) {\n        res.render('profile/editProfile', {\n            title: req.user.FullName,\n            customer: req.user\n        });\n    })\n\n    .post(isLoggedIn, function (req, res) {\n        var form = req.body;\n        if (bcrypt.compareSync(form.password, req.user.Password)) {\n            var updateQuery = '\\\n                UPDATE Users\\\n                SET Fullname = \\'' + form.fullName + '\\', \\\n                    Email = \\'' + form.email + '\\', \\\n                    StreetAddress = \\'' + form.streetAddress + '\\', \\\n                    PostCode = \\'' + form.postcode + '\\', \\\n                    City = \\'' + form.city + '\\', \\\n                    Country = \\'' + form.country + '\\', \\\n                    Phone = \\'' + form.phone + '\\' \\\n                WHERE UserID = ' + req.user.UserID;\n\n            RunQuery(updateQuery, function (result) {\n                res.redirect('/usr/' + req.user.Username);\n            });\n        }\n        else {\n            //password wrong\n        }\n    });\n\nrouter.route('/:username/change-password')\n    .get(isLoggedIn, function (req, res) {\n        res.render('profile/changePassword', {\n            title: req.user.FullName,\n            customer: req.user\n        });\n\n    })\n\n    .post(isLoggedIn, function (req, res) {\n        var form = req.body;\n        if (form.newPassword == form.repeatPassword) {\n            if (bcrypt.compareSync(form.currentPassword, req.user.Password)) {\n                var passwordHash = bcrypt.hashSync(form.newPassword, null, null);\n                var updateQuery = '\\\n                UPDATE Users\\\n                SET Password = \\'' + passwordHash + '\\' \\\n                WHERE UserID = ' + req.user.UserID;\n\n                RunQuery(updateQuery, function (result) {\n                    res.redirect('/usr/' + req.user.Username);\n\n                });\n            }\n            else {\n                //password wrong\n            }\n        }\n        else {\n            //passwords are not matched\n        }\n    });\n\nrouter.route('/:username/orders')\n    .get(isLoggedIn, function (req, res) {\n\n        var selectQuery = '\\\n            SELECT *\\\n            FROM Orders\\\n            WHERE UserID = ' + req.user.UserID;\n\n        RunQuery(selectQuery, function (orders) {\n            res.render('profile/orders', {\n                title: req.user.FullName,\n                customer: req.user,\n                orders: orders\n            });\n        });\n    });\n\nrouter.route('/:username/orders/ll')\n.get(isLoggedIn, function (req, res) {\n\n    res.render('profile/pay');\n});\n\nrouter.route('/eye-test/eye')\n.get(isLoggedIn, function (req, res) {\n    res.render('views/eye/');\n});\n\n\nrouter.route('/:username/orders/:id')\n    .get(isLoggedIn, function (req, res) {\n        //get order info\n        var selectQuery = '\\\n            SELECT *\\\n            FROM Orders\\\n            WHERE OrderID = ' + req.params.id;\n\n        RunQuery(selectQuery, function (order) {\n            //get delivery info\n            selectQuery = '\\\n                SELECT *\\\n                FROM Addresses\\\n                WHERE AddressID = ' + order[0].AddressID;\n\n            RunQuery(selectQuery, function (address) {\n                //get order info\n                selectQuery = '\\\n                    SELECT *\\\n                    FROM `Order Details`\\\n                    INNER JOIN (\\\n                        SELECT Products.*, Categories.CategorySlug\\\n                        FROM Products\\\n                        INNER JOIN Categories\\\n                        ON Products.CategoryID = Categories.CategoryID\\\n                    ) `Table`\\\n                    ON `Order Details`.ProductID = `Table`.ProductID\\\n                    WHERE OrderID = ' + order[0].OrderID;\n\n                RunQuery(selectQuery, function (products) {\n                    //get order info\n\n                    var contextDict = {\n                        title: req.user.FullName,\n                        customer: req.user,\n                        order: order[0],\n                        address: address[0],\n                        products: products\n                    };\n\n                    res.render('profile/viewOrder', contextDict);\n                });\n            });\n        });\n    });\n    router.route('/:username/orders/:id')\n    .get(isLoggedIn, function (req, res) {\n        //get order info\n        var selectQuery = '\\\n            SELECT *\\\n            FROM Orders\\\n            WHERE OrderID = ' + req.params.id;\n\n        RunQuery(selectQuery, function (order) {\n            //get delivery info\n            selectQuery = '\\\n                SELECT *\\\n                FROM Addresses\\\n                WHERE AddressID = ' + order[0].AddressID;\n\n            RunQuery(selectQuery, function (address) {\n                //get order info\n                selectQuery = '\\\n                    SELECT *\\\n                    FROM `Order Details`\\\n                    INNER JOIN (\\\n                        SELECT Products.*, Categories.CategorySlug\\\n                        FROM Products\\\n                        INNER JOIN Categories\\\n                        ON Products.CategoryID = Categories.CategoryID\\\n                    ) `Table`\\\n                    ON `Order Details`.ProductID = `Table`.ProductID\\\n                    WHERE OrderID = ' + order[0].OrderID;\n\n                RunQuery(selectQuery, function (products) {\n                    //get order info\n\n                    var contextDict = {\n                        title: req.user.FullName,\n                        customer: req.user,\n                        order: order[0],\n                        address: address[0],\n                        products: products\n                    };\n\n                    res.render('profile/viewOrder', contextDict);\n                });\n            });\n        });\n    });\n\nrouter.route('/:username/addresses')\n    .get(isLoggedIn, function (req, res) {\n\n        var selectQuery = '\\\n            SELECT *\\\n            FROM Addresses\\\n            WHERE UserID = ' + req.user.UserID;\n\n        RunQuery(selectQuery, function (addresses) {\n            res.render('profile/addresses', {\n                title: req.user.FullName,\n                customer: req.user,\n                addresses: addresses\n            });\n        });\n    });\n\nrouter.route('/:username/addresses/:id/edit')\n    .get(isLoggedIn, function (req, res) {\n\n        var selectQuery = '\\\n            SELECT *\\\n            FROM Addresses\\\n            WHERE AddressID = ' + req.params.id;\n\n        RunQuery(selectQuery, function (address) {\n            res.render('profile/editAddress', {\n                title: req.user.FullName,\n                customer: req.user,\n                address: address[0]\n            });\n        });\n    })\n\n    .post(isLoggedIn, function (req, res) {\n        var form = req.body;\n\n        var updateQuery = '\\\n                UPDATE Addresses\\\n                SET Fullname = \\'' + form.fullName + '\\', \\\n                    StreetAddress = \\'' + form.streetAddress + '\\', \\\n                    PostCode = \\'' + form.postcode + '\\', \\\n                    City = \\'' + form.city + '\\', \\\n                    Country = \\'' + form.country + '\\', \\\n                    Phone = \\'' + form.phone + '\\' \\\n                WHERE AddressID = ' + req.params.id;\n\n        RunQuery(updateQuery, function (result) {\n            res.redirect('/usr/' + req.user.Username + '/addresses/');\n        });\n    });\n\nrouter.route('/:username/addresses/:id/delete')\n    .post(isLoggedIn, function (req, res, next) {\n\n        var sqlStr = '\\\n            DELETE FROM Addresses\\\n            WHERE AddressID = ' + req.params.id;\n\n        RunQuery(sqlStr, function (result) {\n            res.redirect('/usr/' + req.user.Username + '/addresses/');\n        });\n    });\n\nrouter.route('/:username/addresses/add')\n    .get(isLoggedIn, function (req, res) {\n        res.render('profile/addAddress', {\n            title: req.user.FullName,\n            customer: req.user\n        });\n    })\n\n    .post(isLoggedIn, function (req, res) {\n        var form = req.body;\n\n        var insertQuery = '\\\n                INSERT INTO Addresses\\\n                VALUES (null, ' + req.user.UserID + ', \\\n                    \\'' + form.fullName + '\\', \\\n                    \\'' + form.streetAddress + '\\', \\\n                    \\'' + form.postcode + '\\', \\\n                    \\'' + form.city + '\\', \\\n                    \\'' + form.country + '\\', \\\n                    \\'' + form.phone + '\\')';\n\n        RunQuery(insertQuery, function (result) {\n            res.redirect('/usr/' + req.user.Username + '/addresses/');\n        });\n    });\n\n\nrouter.route('/:username/addresses/:id/ll')\n.get(isLoggedIn, function (req, res) {\n\n})\n\nmodule.exports = router;"]}