{"version":3,"sources":["shkNew.js"],"names":["express","require","app","mysql","bodyParser","urlencodedParser","urlencoded","extended","use","json","connection","createConnection","host","user","password","database","connect","get","req","res","render","post","next","console","log","body","name","message","err","sql","con","query","result","title","end","listen"],"mappings":";;AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,GAAG,GAAGF,OAAO,EAAjB;;AACA,IAAIG,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAII,gBAAgB,GAAGD,UAAU,CAACE,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAvB;AAEAL,GAAG,CAACM,GAAJ,CAAQJ,UAAU,CAACK,IAAX,EAAR;AACAP,GAAG,CAACM,GAAJ,CAAQJ,UAAU,CAACE,UAAX,CAAsB;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAtB,CAAR;AACAL,GAAG,CAACM,GAAJ,CAAQR,OAAO,UAAP,CAAe,QAAf,CAAR;AAEA,IAAIU,UAAU,GAAGP,KAAK,CAACQ,gBAAN,CAAuB;AACpCC,EAAAA,IAAI,EAAE,WAD8B;AAEpCC,EAAAA,IAAI,EAAE,MAF8B;AAGpCC,EAAAA,QAAQ,EAAE,EAH0B;AAIpCC,EAAAA,QAAQ,EAAE;AAJ0B,CAAvB,CAAjB;AAOAL,UAAU,CAACM,OAAX;AAEAd,GAAG,CAACe,GAAJ,CAAQ,SAAR,EAAkB,UAASC,GAAT,EAAaC,GAAb,EAAkB;AAChCA,EAAAA,GAAG,CAACC,MAAJ,CAAW,OAAX;AACH,CAFD;AAIAlB,GAAG,CAACmB,IAAJ,CAAS,SAAT,EAAmBhB,gBAAnB,EAAqC,UAASa,GAAT,EAAcC,GAAd,EAAmBG,IAAnB,EAAyB;AAC1DC,EAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,IAAJ,CAASC,IAArB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,IAAJ,CAASE,OAArB;AACAjB,EAAAA,UAAU,CAACM,OAAX,CAAmB,UAASY,GAAT,EAAc;AAC7B,QAAIA,GAAJ,EAAS,MAAOA,GAAP;AACTL,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAIK,GAAG,GAAG,qDAAqDX,GAAG,CAACO,IAAJ,CAASC,IAA9D,GAAqE,MAArE,GAA8ER,GAAG,CAACO,IAAJ,CAASE,OAAvF,GAAiG,IAA3G;AACAG,IAAAA,GAAG,CAACC,KAAJ,CAAUF,GAAV,EAAe,UAASD,GAAT,EAAcI,MAAd,EAAuB;AAClC,UAAGJ,GAAH,EAAQ,MAAMA,GAAN;AACRL,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,KAHD;AAIH,GARD;AASAL,EAAAA,GAAG,CAACC,MAAJ,CAAW,OAAX,EAAoB;AAACa,IAAAA,KAAK,EAAE;AAAR,GAApB;AACH,CAbD;AAeAvB,UAAU,CAACwB,GAAX;AAEAhC,GAAG,CAACiC,MAAJ,CAAW,IAAX,EAAiB,YAAY;AACzBZ,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,CAFD","sourcesContent":["var express = require('express');\r\nvar app = express();\r\nvar mysql = require('mysql');\r\nvar bodyParser = require('body-parser');\r\nvar urlencodedParser = bodyParser.urlencoded({ extended: false });\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({extended: false}));\r\napp.use(express.static('public'));\r\n\r\nvar connection = mysql.createConnection({\r\n    host: \"localhost\",\r\n    user: \"root\",\r\n    password: \"\",\r\n    database: \"mywebsite\"\r\n});\r\n\r\nconnection.connect();\r\n\r\napp.get('/submit',function(req,res) {\r\n    res.render('index');\r\n});\r\n\r\napp.post('/submit',urlencodedParser, function(req, res, next) {\r\n    console.log(req.body.name);\r\n    console.log(req.body.message);\r\n    connection.connect(function(err) {\r\n        if (err) throw  err;\r\n        console.log(\"connected\");\r\n        var sql = \"INSERT INTO `users` (`name`,`message`) VALUES ('\" + req.body.name + \"', '\" + req.body.message + \"')\";\r\n        con.query(sql, function(err, result)  {\r\n            if(err) throw err;\r\n            console.log(\"table created\");\r\n        });\r\n    });\r\n    res.render('index', {title: 'Express'});\r\n});\r\n\r\nconnection.end();\r\n\r\napp.listen(3000, function () {\r\n    console.log('Listening on port 3000');\r\n});"],"file":"shkNew.dev.js"}